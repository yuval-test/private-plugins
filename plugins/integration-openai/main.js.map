{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAEa,oBAAY,GAAuB;IAC9C,EAAE,cAAc,EAAE,eAAe,EAAE;CACpC,CAAC;AAEW,oBAAY,GAAG;IAC1B,YAAY,EAAE;QACZ,MAAM,EAAE,SAAS;KAClB;CACF,CAAC;;;;;;;;ACVF;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACbA,wCAA+B;AAC/B,6CAAyD;AAEzD,MAAM,uBAAuB;IAC3B,QAAQ;QACN,OAAO;YACL,YAAY,EAAE;gBACZ,KAAK,EAAE,IAAI,CAAC,iBAAiB;aAC9B;YACD,uBAAuB,EAAE;gBACvB,MAAM,EAAE,IAAI,CAAC,6BAA6B;aAC3C;YACD,kBAAkB,EAAE;gBAClB,MAAM,EAAE,IAAI,CAAC,wBAAwB;aACtC;SACF,CAAC;IACJ,CAAC;IAED,qDAAqD;IACrD,6BAA6B,CAC3B,OAAmB,EACnB,WAA0C;QAE1C,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,wBAAY,CAAC,CAAC;QAEhD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,0CAA0C;IAC1C,wBAAwB,CACtB,OAAmB,EACnB,WAAqC;QAErC,WAAW,CAAC,YAAY,GAAG,CAAC,GAAG,WAAW,CAAC,YAAY,EAAE,GAAG,wBAAY,CAAC,CAAC;QAE1E,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,8DAA8D;IAC9D,KAAK,CAAC,iBAAiB,CACrB,OAAmB,EACnB,WAA+B,EAC/B,OAAkB;QAElB,MAAM,UAAU,GAAG,kBAAO,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAClD,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAC1D,UAAU,EACV,OAAO,CAAC,iBAAiB,CAAC,YAAY,CACvC,CAAC;QAEF,MAAM,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAClC,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAED,qBAAe,uBAAuB,CAAC","sources":["webpack:///./src/constants.ts","webpack:///external node-commonjs \"path\"","webpack:///webpack/bootstrap","webpack:///./src/index.ts"],"sourcesContent":["import { VariableDictionary } from \"@amplication/code-gen-types\";\n\nexport const envVariables: VariableDictionary = [\n  { OPENAI_API_KEY: \"[open-ai-key]\" },\n];\n\nexport const dependencies = {\n  dependencies: {\n    openai: \"^4.24.7\",\n  },\n};\n","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {\n  AmplicationPlugin,\n  CreateServerDotEnvParams,\n  CreateServerPackageJsonParams,\n  CreateServerParams,\n  DsgContext,\n  Events,\n  ModuleMap,\n} from \"@amplication/code-gen-types\";\nimport { resolve } from \"path\";\nimport { dependencies, envVariables } from \"./constants\";\n\nclass IntegrationOpenaiPlugin implements AmplicationPlugin {\n  register(): Events {\n    return {\n      CreateServer: {\n        after: this.afterCreateServer,\n      },\n      CreateServerPackageJson: {\n        before: this.beforeCreateServerPackageJson,\n      },\n      CreateServerDotEnv: {\n        before: this.beforeCreateServerDotEnv,\n      },\n    };\n  }\n\n  //adds the openai dependency to the package.json file\n  beforeCreateServerPackageJson(\n    context: DsgContext,\n    eventParams: CreateServerPackageJsonParams\n  ) {\n    eventParams.updateProperties.push(dependencies);\n\n    return eventParams;\n  }\n\n  //adds the openai api key to the .env file\n  beforeCreateServerDotEnv(\n    context: DsgContext,\n    eventParams: CreateServerDotEnvParams\n  ) {\n    eventParams.envVariables = [...eventParams.envVariables, ...envVariables];\n\n    return eventParams;\n  }\n\n  //adds the openai module and service to the \"providers\" folder\n  async afterCreateServer(\n    context: DsgContext,\n    eventParams: CreateServerParams,\n    modules: ModuleMap\n  ): Promise<ModuleMap> {\n    const staticPath = resolve(__dirname, \"./static\");\n    const staticsFiles = await context.utils.importStaticModules(\n      staticPath,\n      context.serverDirectories.srcDirectory\n    );\n\n    await modules.merge(staticsFiles);\n    return modules;\n  }\n}\n\nexport default IntegrationOpenaiPlugin;\n"],"names":[],"sourceRoot":""}